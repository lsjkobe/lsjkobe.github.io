[{"title":"Spring解决Vue Axios跨域访问的问题","date":"2017-05-18T13:45:46.000Z","path":"2017/05/18/Spring解决Vue-Axios跨域访问的问题/","text":"什么叫跨域概念：只要协议、域名、端口有任何一个不同，都被当作是不同的域。1234567891011121314151617URL 说明 是否允许通信http://www.a.com/a.jshttp://www.a.com/b.js 同一域名下 允许http://www.a.com/lab/a.jshttp://www.a.com/script/b.js 同一域名下不同文件夹 允许http://www.a.com:8000/a.jshttp://www.a.com/b.js 同一域名，不同端口 不允许http://www.a.com/a.jshttps://www.a.com/b.js 同一域名，不同协议 不允许http://www.a.com/a.jshttp://70.32.92.74/b.js 域名和域名对应ip 不允许http://www.a.com/a.jshttp://script.a.com/b.js 主域相同，子域不同 不允许http://www.a.com/a.jshttp://a.com/b.js 同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问）http://www.cnblogs.com/a.jshttp://www.a.com/b.js 不同域名 不允许 通过jsonp跨域维基百科的定义是：JSONP（JSON with Padding）是资料格式 JSON 的一种“使用模式”，可以让网页从别的网域要资料。但是这种方法只支持Get请求，不支持post请求 通过CORS跨域CORS是一个W3C标准，全称是”跨域资源共享”，它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。 首先先看一个场景,一般情况下没有设置跨域访问时，在Vue中定义了方法，触发这个方法时通过axios执行post请求时:123axios.post('http://localhost:8080/user/leoli/123456789/login').then(res =&gt; &#123; console.log(res); &#125;); 会报以下错误 这时候可以通过配置cors的方式进行跨域访问，在Spring 4.2版本支持了CORS的方式 配置的方式 1234567&lt;mvc:cors&gt; &lt;mvc:mapping path=\"/**\" allowed-origins=\"*\" allowed-methods=\"POST, GET, OPTIONS, DELETE, PUT\" allowed-headers=\"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\" allow-credentials=\"true\" /&gt;&lt;/mvc:cors&gt; 注解的方式（@CrossOrigin） 1@CrossOrigin(origins = \"*\", maxAge = 3600) 这时候再跑post请求就成功了","tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"},{"name":"Axios","slug":"Axios","permalink":"http://yoursite.com/tags/Axios/"},{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}]},{"title":"通过Hexo+Github Pages搭建个人博客","date":"2017-04-19T14:04:48.000Z","path":"2017/04/19/通过Hexo-Github-Pages搭建个人博客/","text":"第一次写Blog,多多包涵！ 大概步骤： 搭建环境（安装NodeJS,安装Git,安装Hexo,配置Hexo） 配置Github 发表文章 搭建环境 安装NodeJSwindows下的NodeJS安装是比较方便的,到NodeJS官网下载安装安装完成后可以在cmd中输入node -v查看是否安装成功，由于NodeJS已经集成了npm,所以可以通过npm -v查看安装版本信息 安装Git因为需要发布到Github，所以需要安装GitGit的官方下载地址可以通过git –version查看版本信息 安装Hexo新建一个目录用于安装Hexo,如D:\\lsjkobe\\blog进入到这个目录下,这里说一个技巧,在当前目录下按住shift,然后点击鼠标右键,选择在此处打开命令窗口,可以在当前目录下快速进入到cmd在命令行中输入: 1npm install hexo-cli -g 完成之后如图所示,然后在命令行中输入:1npm install hexo --save 安装完之后如图所示,在命令行输入以下命令查看hexo安装信息:1hexo -v 配置Hexo接着上面的操作，在命令行中依次输入:12hexo initnpm install npm install会下载相关的依赖,这时候环境基本已经搭建完成可以本地体验一下了体验前先来熟悉一下hexo常见的命令12345hexo s :启动本地服务器hexo g :生成网站静态文件到默认设置的 public 文件夹hexo d :自动生成网站静态文件，并部署到设定的仓库hexo new &quot;xx&quot; :新建一篇标题为xx的文章hexo clean :清除缓存文件 db.json 和已生成的静态文件 public 首先先在命令行中输入:1hexo g 生成网站静态文件然后在命令行中输入:1hexo s 这样就代表启动服务器成功,默认地址：http://localhost:4000/在浏览器输入http://localhost:4000/ 配置Github 创建一个[youname].github.io的仓库登录github后，点击页面右上角的[+]按钮然后点击[New repository]新建一个仓库进到仓库页面后按照图片的格式创建创建成功会看到这样界面这时候点击README或其它的随便创建一个文件,创建完成后点击Settings去设置github pages如图红色框中选择master branch和点击save保存这时候点击Code去拿到仓库地址然后去到本地博客的根目录下站点配置文件_config.yml中配置,比如我的仓库地址是https://github.com/lsjkobe/lsjkobe.github.io.git,那么配置如下1234deploy: type: git repo: https://github.com/lsjkobe/lsjkobe.github.io.git branch: master 这样hexo和github pages就关联起来了,这时候就可以通过在命令行中输入:提醒：跑下面命令前需要先安装一个插件,通过命令：npm install hexo-deployer-git –save12hexo ghexo d 这样就把博客部署到github pages上了,这时候可以通过https://yourName.github.io 访问到你的hexo博客了 发表文章在命令行中输入:1hexo new &quot;Hello World&quot; 会在根目录\\source_posts下新建一个叫Hello World的markdown格式的文件,这个就是新建的文章,可以通过markdown编辑器编辑你的内容,编辑完成后可以重新在命令行中输入:12hexo ghexo d 这时候再打开https://yourName.github.io 就会能看到新发布的文章了","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Github Pages","slug":"Github-Pages","permalink":"http://yoursite.com/tags/Github-Pages/"}]},{"title":"Hello World","date":"2017-04-17T11:42:24.263Z","path":"2017/04/17/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]